# requirements:
# ansible-galaxy collection install amazon.aws
---
- name: Create AWS VPC
  hosts: localhost
  gather_facts: no
  vars_files:
    - vars.yaml
  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        state: present
        name: "{{ vpc_name }}"
        region: "{{ aws_region }}"
        cidr_block: "{{ vpc_cidr }}"
        resource_tags:
          Name: "{{ vpc_name }}"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: vpc

    - debug:
        var: vpc

    - name: Set VPC ID
      set_fact:
        vpc_id: "{{ vpc.vpc.id }}"

    - name: Create Subnets
      amazon.aws.ec2_vpc_subnet:
        state: present
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ item.cidr }}"
        az: "{{ aws_region}}{{ item.az }}"
        resource_tags:
          Name: "Subnet-{{ item.az }}"
        # assign_public_ip: yes  # This enables public IP assignment for the subnet
        map_public: yes        # This enables DNS support for the subnet
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      loop: "{{ subnets }}"
      register: subnets_result

         
    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: igw_result

    - name: Set Internet Gateway ID
      set_fact:
        igw_id: "{{ igw_result.gateway_id }}"

    - name: Attach Internet Gateway to VPC
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        tags:
          Name: "MainRouteTable"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: main_route_table

    - name: Get Main Route Table ID
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          vpc-id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: main_route_table

    - debug:
        var: main_route_table
  
    - name: Add Internet Gateway Route
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_id }}"
        route_table_id: "{{ main_route_table.route_tables[0].id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw_id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
    
    - name: Extract Subnet IDs
      set_fact:
        subnet_ids: "{{ subnet_ids | default([]) + [item.subnet.id] }}"
      loop: "{{ subnets_result.results }}"

    # - name: Create account Roles
    #   shell: rosa create account-roles
    #   register: role_info

    

    - name: Get Support Role ARNs
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          "tag-key": "ManagedOpenShift"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: support_role_info

    - debug:
        var: support_role_info

    - name: Get Support Role ARNs
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "fsx-Support-Role"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: support_role_info

  

    - name: Get Control Plane Role ARNs
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "fsx-ControlPlane-Role"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: controlplane_role_info

    - name: Get Worker Role ARNs
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "fsx-Worker-Role"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: worker_role_info

    - name: Generate GUID
      shell: "date +%s | sha256sum | base64 | head -c 4"
      register: guid

    - name: Set Operator Roles Prefix
      set_fact:
        operator_roles_prefix: "{{ cluster_name }}-{{ guid }}"

    - name: Create Rosa Cluster Command
      ansible.builtin.template:
       src: rosa_create_cluster.j2
       dest: ./rosa_create_cluster.sh
       mode: '0755'

    - name: Run ROSA Cluster Creation Script
      ansible.builtin.command: ./rosa_create_cluster.sh
