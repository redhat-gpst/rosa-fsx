# requirements:
# ansible-galaxy collection install amazon.aws
---
- name: Create AWS dual-AZ environment for ROSA FSx
  gather_facts: no
  hosts: all
  become: true
  become_user: rosa
  vars_files:
    - vars.yaml
  tasks:
    - name: Install boto3 package
      pip:
        name: boto3
        state: present
        executable: pip3
        extra_args: --user
      become_user: rosa

    - name: Crete VPC
      amazon.aws.ec2_vpc_net:
        state: present
        name: "{{ vpc_name }}"
        region: "{{ aws_region }}"
        cidr_block: "{{ vpc_cidr }}"
        resource_tags:
          Name: "{{ vpc_name }}"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: vpc

    - name: Set VPC ID
      set_fact:
        vpc_id: "{{ vpc.vpc.id }}"

    - name: Create Subnets
      amazon.aws.ec2_vpc_subnet:
        state: present
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ item.cidr }}"
        az: "{{ aws_region}}{{ item.az }}"
        resource_tags:
          Name: "{{ cluster_name }}-subnet-{{ item.az }}"
        map_public: yes 
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      loop: "{{ subnets }}"
      register: subnets_result

    - debug:
        var: subnets_result
         
    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: igw_result

    - name: Set Internet Gateway ID
      set_fact:
        igw_id: "{{ igw_result.gateway_id }}"

    - name: Attach Internet Gateway to VPC
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        tags:
          Name: "MainRouteTable"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: main_route_table

    - name: Get Main Route Table ID
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          vpc-id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      register: main_route_table

    - name: Add Internet Gateway Route
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_id }}"
        route_table_id: "{{ main_route_table.route_tables[0].id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw_id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
     
    # - name: Extract Subnet IDs
    #   set_fact:
    #     subnet_ids: "{{ subnet_ids | default([]) + [item.subnet.id] | regex_search ('subnet-.*) }}"
    #   loop: "{{ subnets_result.results }}"

    - name: Extract All Subnet IDs
      ansible.builtin.set_fact:
        subnet_ids: "{{ subnets_result.results | map(attribute='item.subnet.id') | list }}"

    - debug:
        var: subnet_ids

    - name: Format Subnet IDs as Comma-Separated List
      ansible.builtin.set_fact:
        subnet_ids_csv: "{{ subnet_ids | join(',') }}"

    - debug:
        var: subnet_ids_csv

    - name: Create account Roles
      shell: /usr/local/bin/rosa create account-roles --mode auto
      register: role_info

    - name: Set Variables from Rosa Output
      ansible.builtin.set_fact:
        installer_role_arn: "{{ role_info.stdout| regex_search('arn.*Installer-Role') }}"
        support_role_arn: "{{ role_info.stdout| regex_search('arn.*Support-Role') }}"
        controlplane_iam_role: "{{ role_info.stdout | regex_search('arn.*ControlPlane-Role') }}"
        worker_iam_role: "{{ role_info.stdout | regex_search('arn.*Worker-Role$') }}"

    - name: Debug support_role_arn
      debug:
        var: support_role_arn

    - name: Debug controlplane_iam_role
      debug:
        var: controlplane_iam_role

    - name: Debug worker_iam_role
      debug:
        var: worker_iam_role 


    - name: Generate GUID
      shell: "date +%s | sha256sum | base64 | head -c 4"
      register: guid

    - name: Generate OIDC
      shell: "date +%s | sha256sum | base64 | head -c 32"
      register: oidc_config_id

    - debug:
        var: guid.stdout

    - debug:
        var: oidc_config_id.stdout

    - name: Set Operator Roles Prefix
      set_fact:
        operator_roles_prefix: "{{ cluster_name }}-{{ guid }}"

    - name: Create Rosa Cluster Command
      ansible.builtin.template:
       src: rosa_create_cluster.j2
       dest: ./rosa_create_cluster.sh
       mode: '0755'

    - name: Run ROSA Cluster Creation Script
      ansible.builtin.command: ./rosa_create_cluster.sh
